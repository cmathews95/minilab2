Name:    Christie Mathews
UCLA ID: 104404412

Collaborators:

-------------------------------------------------------------------------------

Response to Exercise 1:
The name of the scheduling algorithm is:
Round Robin

Exercise 2:
Changed	-schedos-1.c: added sys_exit(1)
	-schedos-kern.c: add Strict Priority Scheduling Algorithm

Response to Exercise 3:
Average turnaround time for scheduling_algorithm 0:	1278.5 ms
	Process | Arrival Time | Finish Time
	   1            0           1277
	   2            0           1278
	   3            0           1279
	   4            0           1280

	Avg. turnaround time = (1277 + 1278 + 1279 + 1280)*(1/4) = 1278.5

Average turnaround time for scheduling_algorithm 1:	800.0 ms
	Process | Arrival Time | Finish Time
	   1            0           320
	   2            0           640
	   3            0           960
	   4            0           1280
	Avg. turnaround time = (320 + 640 + 960 + 1280)*(1/4) = 800

Average wait time for scheduling_algorithm 0:	1.5 ms
	Process | Arrival Time | Start Time
	   1            0           0
	   2            0           1
	   3            0           2
	   4            0           3
	Avg. wait time = (0 + 1 + 2 + 3)*(1/4) = 1.5

Average wait time for scheduling_algorithm 1:	480 ms
	Process | Arrival Time | Start Time
	   1            0           0
	   2            0           320
	   3            0           640
	   4            0           960
	Avg. wait time = (0 + 320 + 640 + 960)*(1/4) = 480


Exercise 4:

Did you complete Exercise 4A, Exercise 4B, or both for extra credit?
Exercise 4A
Changed schedos-kern.c -Added priority scheduling based on priority level not process id
		       -Added interrupt handler for sys_priority(), but interuppt handler
		        has the same name: INT_SYS_USER1
	schedos-kern.h -Added priority variable in process structure
	schedos-app.h  -Implemented sys_priority() call to change priority #
Exercise 4B: Did this for extra credit. But implementation isn't perfect. It's very slow
	     and sometimes doesn't run.
	     To implement this I added a system call and wrote an algorithm as well as
	     added 2 values to the struct. A p_share value and a p_share_count value.
	     basically, it was supposed to iterate through all the processes until it
	     found one which was runnable and hadn't been run it's p_share number of times.

Exercise 5:
	Specifically, you see: 1 2 3 4 | 1 2 3 4 | 1 2 3 4 | 1 2 3 4 | 1 2 3 | 1 2 ...
	The first known timer interrup occured when weensyos was trying to run process 4
	for the 5th time. I know it was interrupted because "4" was never printed; thus,
	the process was interrupted before this step could happen. 
	

Exercise 6:
	I implemented a new system call that atomically prints a character to the console.
	This was easy to implement. I add a sys_call() in schedos-kern.h and a SYS_CALL in x86.h.
	I also wrote the handler in schedos-kern.c. Finally, I made the call in schedos-1.c:
	sys_write(PRINTCHAR). The handler in the kernel incrememnts the pointer and adds the
	PRINTCHAR stored in the eax register.

Anything else you'd like us to know:
	Wasn't sure about the defines. I implemented the scheduling algorithms with
	the numbers in the spec. To change it just change the value in the start function
	of kern.c. For priority scheduling, right now the values are all the same.


Extra credit exercises:
Exercise 7: 
	I implemented the Lottery Scheduling as scheduling_algorithm 5;
	I allocated an pid_t array lottery_tickets[100*NPROCS] & used a 
	random # generator I implemented to pick rand values from (100*NPROCS)
	for each process and then loaded this range of values with the pid 
	associated with this process. I made sure that each process got atleast
	one value in this array so that it would have some possiblity of running.
	Then in my scheduling algorithm I found a random value from (100*NPROCS)
	and then ran the process associated with this element of lottery_tickets[]
	and ran it if it was RUNNABLE.
